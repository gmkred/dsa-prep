
Extraction of digits:
7789  9,8,7,7
7789%10  9	
7789/10  778
Number of divisors:
36  1,2,3,4,6,9,12,18, 36
If we loop from 1 to 36 the TC will be O(N)
NOTE:
1  36
2  18
3  12
4  9
6  6
 6 = square root (36), even If we loop till the square root of N we can get all the divisors.
Loop : i*i <= N
If(N%1 == 0){
	List.add(1);
	List.add(N/1);
} 
Prime number : 1 and itself are the only divisors.
23 : is this a prime?
 Loop till the square root of 23.
Greatest Common Divider  | Highest Common Factor.
N1 = 9
Factors : 1,3,9
N2 = 12
Factors : 1,2,3,4,6,12
Common factors/dividers 1,3
HCF/GCD =  3

GCD (20,40)  20
For given number, one of them can also be a GCD.
Start the loop from 20(lowest number in the given numbers) till 1
Divide all the numbers by 20 to 1 when ever a number divides all the numbers perfectly that is the GCD and break out from loop.
In this case the Worst case scenario would be O(N1 or N2).
So use Equilateral Algorithm:
GCD(N1,N2) == GCD(N1-N2,N2) if N1 > N2
GCD(20,15)  Math.max(20,15)
GCD(20-15,15)  GCD(5,15)  Mah.max(5,15)
GCD(15-5,5)  GCD(10,5)  Math.max(10,5)
GCD(10-5,5)  GCD(5,5)  Math.max(5,5)
GCD(5-5,5)  GCD(0,5)  The moment any one number becomes 
Even better solution
GCD(N1,N2) == GCD(N1%N2,N2) where N1 > N2
GCD(20,15)  (20%15,15)  (5,15)  (15%5,5)  (0,5) GCD = 5
GCD(27,13)  (27%13,13)  (1,13)  (13%1,1)  (0,1) GCD = 1
Power exponentiation:
2 ^5 = 2*2*2*2*2
x =2
n =5

---------------------------
Summation of N numbers

Formula derivation:
To find sum of first N numbers, we need the reverse numbers from N to 1
add these 2 series of numbers.

with this we will get the same number in the entire series. and the sum of the new series will
be N(N+1) and this will be the 2 times the actual sum, because we have added the reversed series.
so divide the sum/2 to get actual series sum.


S{n} =	1+	2+		3+ 		... +(n-1)+	n)
S{n} =	n+	(n-1)+	(n-2)+ 	... +2+		1)
		+
2S(n)=	(n+1)+(n+1)+(n+1) 	...	(n+1)      n times


2S(n) = n(n+1)
s(n) = n(n+1)/2

To sum from A to N natural numbers
K = 3

N(N+1)/2 - (N-(k-1))*(N+(K-1)+)/2
OR
N(N+1)/2 - (k-1)*((k-1)+1)/2

Example : 

sum 0f first 10 numbers

a=	1	2	3	4	5	6	7	8	9	10
a=	10	9	8	7	6	5	4	3	2	1
	+
2a= 11	11	11	11	11	11	11	11	11	11       10 times

2a= 10(11)
a = 10(11)/2  == 5(11) == 55

Example 2 :
sum of natural numbers from 3 to 10

a=	3	4	5	6	7	8	9	10
a=	10	9	8	7	6	5	4	3
	+
2a= 13	13	13	13	13	13	13	13       8 times

2a= 8(13)
a = 8(13)/2  == 4(13) == 52


------------
Union and intersection

a = 1 2 3 4 5 5 6 6 7
b = 1 3 4 5 6 6 7 8

Union of a and b (take all the unique's from both the array) 
1 2 3 4 5 6 7 8 

Intersection of a and b  (common elements)

1 3 4 5 6 6 7

--------------------
prefix sum:
Use hashmap for single iteration
 0  1  2  3  4  5  6  7  8  9  10
{1, 2, 3, 1, 0, 0, 1, 1, 0, 2, 3 }

prefix sum :  hashmap

 0  1  2  3  4  5  6  7  8  9   10
{1, 3, 6, 7, 7, 7, 8, 9, 9, 11, 14}

NOTE: If we have zeroes in array and If there is sum previously exists in 
prefix hash then we should not update it,
if we update, then we may not get the longest sub array.
Example:
{2,0,0,3} k=3

if we update hashmap for 2, then [2, 2(last index value of prefix sum 2)]
and longest length with sum 3 will be 1 which is not correct.


K = 3

  0  1  2  3  4  5  6  7  8  9 
{ 1  1  1  1  1  1  1  1  1  1 }
  |--------|  |-----|
      X=4       K=3
  |-----------------|
         SUM=7

SUM - k = X;
7 - 3 = 4
prefix sum 4 present at 3rd index, so 6 - 3 = 3 is the length of sub array with sum K.


find the number of sub arrays with 
sum K = 3;  
In single go, we store in hashmap and check if an array has sum k.

prefix indexes
at 1st index sum is 3, 3 - 3 = 0, since, this is the first sub array with sum K, take the length as i + 1
at 2nd index sum is 6, 6 - 3 = 3, we have 3 at 1st index, from 2nd to 1st the distance is 2-1 = 1 length of subarray
at 3rd index sum is 7, 7 - 3 = 4, we dont have 4 in the hashmap, so ignore this.
at 7th index sum is 9, 9 - 3 = 6, we have 6 at 2nd index, from 7th to 2nd the distance is 7-2 = 5 length of subarray 
at 8th index sum is 9, 9 - 3 = 6, we have 6 at 2nd index, from 8th to 2nd the distance is 8-2 = 6 length of subarray 
at 9th index sum is 11,11- 3 = 8, we have 8 at 6th index, from 9th to 6th the distance is 9-6 = 3 length of subarray 



	
	
	